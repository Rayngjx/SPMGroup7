generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model delegation_requests {
  delegation_request                            Int       @id @default(autoincrement())
  staff_id                                      Int?
  delegated_to                                  Int?
  status                                        String    @db.VarChar(20)
  created_at                                    DateTime? @default(now()) @db.Timestamptz(6)
  users_delegation_requests_delegated_toTousers users?    @relation("delegation_requests_delegated_toTousers", fields: [delegated_to], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  users_delegation_requests_staff_idTousers     users?    @relation("delegation_requests_staff_idTousers", fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model logs {
  log_id                         Int      @id @default(autoincrement())
  staff_id                       Int?
  request_id                     Int
  processor_id                   Int?
  reason                         String?
  action                         String   @db.VarChar(20)
  created_at                     DateTime @db.Date
  users_logs_processor_idTousers users?   @relation("logs_processor_idTousers", fields: [processor_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  users_logs_staff_idTousers     users?   @relation("logs_staff_idTousers", fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model requests {
  request_id   Int       @id @default(autoincrement())
  staff_id     Int?
  timeslot     String?   @db.VarChar(20)
  date         DateTime  @db.Date
  reason       String?
  status       String    @db.VarChar(20)
  document_url String?   @db.VarChar(255)
  created_at   DateTime? @default(now()) @db.Timestamptz(6)
  last_updated DateTime? @default(now()) @db.Timestamptz(6)
  processor_id Int?
  users        users?    @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  role_id    Int     @id @default(autoincrement())
  role_title String  @db.VarChar(100)
  users      users[]
}

model users {
  staff_id                                                    Int                   @id @default(autoincrement())
  staff_fname                                                 String                @db.VarChar(100)
  staff_lname                                                 String                @db.VarChar(100)
  department                                                  String                @db.VarChar(100)
  position                                                    String                @db.VarChar(100)
  country                                                     String                @db.VarChar(100)
  email                                                       String?               @unique @db.VarChar(100)
  reporting_manager                                           Int?
  role_id                                                     Int
  temp_replacement                                            Int?
  delegation_requests_delegation_requests_delegated_toTousers delegation_requests[] @relation("delegation_requests_delegated_toTousers")
  delegation_requests_delegation_requests_staff_idTousers     delegation_requests[] @relation("delegation_requests_staff_idTousers")
  logs_logs_processor_idTousers                               logs[]                @relation("logs_processor_idTousers")
  logs_logs_staff_idTousers                                   logs[]                @relation("logs_staff_idTousers")
  logs_dele_logs_dele_processor_idTousers                     logs_dele[]           @relation("logs_dele_processor_idTousers")
  logs_dele_logs_dele_staff_idTousers                         logs_dele[]           @relation("logs_dele_staff_idTousers")
  requests                                                    requests[]
  users                                                       users?                @relation("usersTousers", fields: [reporting_manager], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  other_users                                                 users[]               @relation("usersTousers")
  role                                                        role                  @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
}

model logs_dele {
  log_id                              Int      @id @default(autoincrement())
  staff_id                            Int?
  delegation_request_id               Int
  processor_id                        Int?
  reason                              String?
  action                              String
  created_at                          DateTime @default(now()) @db.Date
  users_logs_dele_processor_idTousers users?   @relation("logs_dele_processor_idTousers", fields: [processor_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  users_logs_dele_staff_idTousers     users?   @relation("logs_dele_staff_idTousers", fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([created_at], map: "idx_logs_dele_created_at")
  @@index([delegation_request_id], map: "idx_logs_dele_delegation_request_id")
  @@index([processor_id], map: "idx_logs_dele_processor_id")
  @@index([staff_id], map: "idx_logs_dele_staff_id")
}
