generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model approved_dates {
  staff_id   Int
  request_id Int
  date       DateTime @db.Date
  requests   requests @relation(fields: [request_id], references: [request_id], onDelete: NoAction, onUpdate: NoAction)
  users      users    @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([staff_id, request_id, date])
}

model dept {
  dept_id                     Int     @id @default(autoincrement())
  dept_name                   String  @db.VarChar(100)
  dept_head                   Int?
  users_dept_dept_headTousers users?  @relation("dept_dept_headTousers", fields: [dept_head], references: [staff_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_dept_head")
  users_users_dept_idTodept   users[] @relation("users_dept_idTodept")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model requests {
  request_id     Int              @id @default(autoincrement())
  staff_id       Int?
  timeslot       String?          @db.VarChar(20)
  daterange      DateTime[]       @db.Date
  reason         String?
  approved       String           @db.VarChar(20)
  approved_dates approved_dates[]
  logs           logs[]
  users          users?           @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

model role {
  role_id    Int     @id @default(autoincrement())
  role_title String  @db.VarChar(100)
  users      users[]
}

model team {
  team_id     Int    @id @default(autoincrement())
  team_name   String @db.VarChar(100)
  team_leader Int?
  users       users? @relation(fields: [team_leader], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  staff_id                      Int                 @id @default(autoincrement())
  staff_fname                   String              @db.VarChar(100)
  staff_lname                   String              @db.VarChar(100)
  dept_id                       Int?
  position                      String?             @db.VarChar(100)
  country                       String?             @db.VarChar(100)
  email                         String?             @unique @db.VarChar(100)
  reporting_manager             Int?
  role_id                       Int?
  approved_dates                approved_dates[]
  dept_dept_dept_headTousers    dept[]              @relation("dept_dept_headTousers")
  logs_logs_processor_idTousers logs[]              @relation("logs_processor_idTousers")
  logs_logs_staff_idTousers     logs[]              @relation("logs_staff_idTousers")
  requests                      requests[]
  team                          team[]
  dept_users_dept_idTodept      dept?               @relation("users_dept_idTodept", fields: [dept_id], references: [dept_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_dept")
  users                         users?              @relation("usersTousers", fields: [reporting_manager], references: [staff_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users_manager")
  other_users                   users[]             @relation("usersTousers")
  role                          role?               @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
  withdraw_requests             withdraw_requests[]
  withdrawn_dates               withdrawn_dates[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model withdraw_requests {
  withdraw_request_id Int               @id @default(autoincrement())
  staff_id            Int?
  timeslot            String?           @db.VarChar(20)
  date                DateTime          @db.Date
  reason              String?
  approved            String            @db.VarChar(20)
  logs                logs[]
  users               users?            @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  withdrawn_dates     withdrawn_dates[]
}

model withdrawn_dates {
  staff_id            Int
  withdraw_request_id Int
  date                DateTime          @db.Date
  users               users             @relation(fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  withdraw_requests   withdraw_requests @relation(fields: [withdraw_request_id], references: [withdraw_request_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([staff_id, withdraw_request_id, date])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model logs {
  log_id                         Int                @id @default(autoincrement())
  staff_id                       Int?
  request_id                     Int?
  withdraw_request_id            Int?
  processor_id                   Int?
  reason                         String?
  users_logs_processor_idTousers users?             @relation("logs_processor_idTousers", fields: [processor_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  requests                       requests?          @relation(fields: [request_id], references: [request_id], onDelete: NoAction, onUpdate: NoAction)
  users_logs_staff_idTousers     users?             @relation("logs_staff_idTousers", fields: [staff_id], references: [staff_id], onDelete: NoAction, onUpdate: NoAction)
  withdraw_requests              withdraw_requests? @relation(fields: [withdraw_request_id], references: [withdraw_request_id], onDelete: NoAction, onUpdate: NoAction)
}
